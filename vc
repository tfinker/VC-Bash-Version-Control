#!/bin/bash

################################################
# vc version control
# Author: Finlay Kerr w1863883
################################################

function add {
# Add a file to the staging area (.staging folder)
# Input: argArray (array)

	if [[ ${#argArray[@]} -eq 0 ]];then
		printf "Add: No arguments provided\n"
		exit 0
	fi

	# process argArray keys
	if [[ -v "argArray[clear]" ]]; then
		if [[ -d '.staging' ]]; then
			rm -r .staging
			printf "Staged files removed\n"
		else
			printf "No staged files to remove\n"
		fi
		exit 0
	elif [[ -v "argArray[all]" ]]; then
		toCopy=*
	elif [[ -v "argArray[file]" ]]; then
		toCopy=${argArray[file]}
		if [[ ! -f $toCopy ]]; then
			echo "Add: File '${argArray[file]}' doesn't exist"
			exit 0
		fi
	else
		echo "Add: No file provided"
		exit 0
	fi


	if [[ ! -d '.staging' ]]; then
		mkdir './.staging'
	fi
	cp -r $toCopy ./.staging/

	if [[ -v "argArray[all]" ]];then
		printf "All files in directory added to staging\n"
	else
		printf "$toCopy added to staging\n"
	fi
}

function listStaging {
# Display numbered files in .staging folder and save them to a global index array
# Input: none

	printf "Files in staging \n"	
	printf "\n"
	if [[ -d './.staging' ]]; then
		index=0
		files=($(ls ./.staging))
		for line in ${files[@]}; do
			printf "\t- $index: $line\n"
			# Add full file path to global fileDir indexed array for display function
			fileDir[index]=".staging/$line"
			(( index = index+1 ))
		done
	else
		printf "\tNo files in staging\n"
	fi	
	printf "\n"
}

function listLastCommit {
# Display numbered files from the last commit and save them to a global index array
# Input: none
	printf "Files in last commit \n"	
	printf "\n"
	if [[ -d './.commit' ]]; then
		commits=($(ls .commit/ | sort -r))
		if [[ ! -z $commits ]];then
			files=($(ls .commit/${commits[0]}/))		
			index=0
			printf "Files in last commit '${commits[0]}':\n"
			for line in ${files[@]}; do
				printf "\t- $index: $line\n"
				# Add full file path to global fileDir indexed array for display function
				fileDir[index]=".commit/${commits[0]}/$line"
				(( index = index+1 ))
			done
		else
			printf "\tNo files in commit\n"
		fi
	else
		printf "\tNo files in commit\n"
	fi
	printf "\n"

}

function listCommits {
# Display numbered files from a user-specified folder and save them to a global index array
# Input: none
	printf "Files in commit \n"	
	printf "\n"
	if [[ -d './.commit' ]]; then
		commits=($(ls .commit/ | sort -r))
		if [[ ! -z $commits ]]; then
			printf "Select a commit to view: \n"
			index=1
			for commit in ${commits[@]}; do
				printf "\t$index: $commit\n"
				(( index = index+1 ))
			done
			read -p "Enter option: " userAction
			printf "\n"
			choice=$(( $userAction-1 ))
			files=($(ls .commit/${commits[$choice]}))
			index=0
			cat .commit/${commits[$choice]}/.commitInfo
			printf "Files in commit: '${commits[$choice]}'\n"
			for file in ${files[@]}; do
				printf "\t- $index: $file\n"
				# Add full file path to global fileDir indexed array for display function
				fileDir[index]=".commit/${commits[$choice]}/$file"
				(( index = index +1 ))
			done
			printf "\n"
		else
			printf "\tNo files in commit\n"
		fi
	else
		printf "\tNo files in commit\n"
	fi

}


function list {
# Intermediary function that picks the correct list function based on the argArray flags
# Input: argArray (array)
	if test ${#argArray[@]}  -gt 0; then
		for arg in ${!argArray[@]}; do
			case $arg in
				staging) listStaging ;;
				last) listLastCommit ;;
				commits) listCommits ;;
			esac
			printf "****\n"
		done
	else	
		printf "No arguments provided\nPlease specify one of the following:\n\t-s: staging\n\t-l: last commit\n\t-c: interactively select a commit\n"
	fi
}

function commit {
# Create a commit using the files in the .staging folder. If there are file clashes, go to merge function to resolve conflicts
# Input: argArray (array)
	
	if [[ ${#argArray[@]} -eq 0 ]];then
		printf "Commit: no arguments provided\n"
		exit 0
	fi

	if [[ ! -d ./.staging ]]; then
		echo "No files in staging"
		exit 0
	fi

	if [[ -z "$(ls -A ./.staging/)" ]]; then
		echo "No files in staging"
		exit 0
	fi
	
	if [[ ${!argArray[@]} != 'msg' ]]; then
		echo "Commit: no message provided"
		exit 0
	fi
	
	commitDate=$(date)
	mkdir -p ./.commit
	commitDirs=($(ls ./.commit))
	
	# Clean up section: if a user has previously quit vc during a commit
	# this section will delete the incomplete commit/merge before copying
	# the last commit to a new folder for comparison with the files in .staging

	lastCommit=0
	for commit in ${commitDirs[@]}; do

		result=$(cleanup $commit)
		if [[ $result == 'ready' ]]; then
			dir=${commit:1}
			if [[ $dir -gt $lastCommit ]]; then
				lastCommit=$dir
			fi
		fi
	done

	if [[ $lastCommit -ne 0 ]]; then
		commitNum=$(($lastCommit +1))
		commitName="c$commitNum"
		mkdir -p ./.commit/$commitName
		cp -r .commit/c$lastCommit/. ./.commit/$commitName/
	else
		commitName="c1"
		mkdir -p ./.commit/$commitName/
	fi
	
	stagingfiles=($(ls .staging))
	commitfiles=($(ls .commit/$commitName))

	# incomplete note used in cleanup unless overwritten by successful commit
	echo "incomplete" > ./.commit/$commitName/.commitInfo
	
	printf "Creating new commit: $commitName \n"
	printf "Staged files: \n"
	for file in ${stagingfiles[@]};
	do
		printf "\t$file\n"
	done
	printf "\n"
	
	for file in ${stagingfiles[@]}
	do
		if [[ -f .commit/$commitName/$file ]]; then
			merge $file $commitName
		else		
			cp -r .staging/$file .commit/$commitName/
			printf "\t$file added to commit\n"
		fi
	done

	# Overwrite incomplete message in .commitInfo
	echo "Commit date: "$commitDate > ./.commit/$commitName/.commitInfo
	echo "Message: "${argArray[msg]} >> ./.commit/$commitName/.commitInfo
	rm -r ./.staging
	echo "Commit complete"
}

function cleanup {
# If a commit has an 'incomplete' status in the .commitInfo file, delete the commit
# Input: 
# 	1) commitName (string)

	status=($(cat ./.commit/$1/.commitInfo))
	if [[ ${status[0]} == 'incomplete' ]]; then
		rm -r .commit/$1
		echo 'incomplete'
	else
		echo 'ready'
	fi

}

function merge {
# Compare the existing and new files and give the user the option to overwrite or merge. If merging
# iteratively identify the next block of changes and run blockMerge
# Input:
# 	1) fileName (string)
# 	2) commitName (string)


	printf "File '$1' exists in last commit "
	compare=$(diff -q .staging/$1 .commit/$2/$1)
	if [[ $compare == "" ]]; then
		echo "and the files are identical"
	else
		echo "but the files are not identical"
	fi

	mergeComplete="false"
	while [[ $mergeComplete != true ]]; do
		printf "Do you want to overwrite (1) or merge (2) '$1' ? "
		read userAction

		case $userAction in
			"1")
				cp -r .staging/$1 .commit/$2/$1
				mergeComplete=true
				echo "File $1 overwritten"
				;;
			"2")
				printf "Merging $1\n"
				printf "\n"
				# create a copy of the staging file
				# while loop  will iteratively align the commit file and the copied staging file until there
				# are no differences left between the two
				cp .staging/$1 .commit/$2/.$1.merging
				compare=$(diff -q .commit/$2/.$1.merging .commit/$2/$1)
				while [[ $compare != ""  ]]; do
					# awk script produces several hidden files as output for the rest of the script
					diff ".commit/$2/$1" ".commit/$2/.$1.merging" | awk -f /usr/bin/awkdiff
					mergeAction=$(sed "1q;d" .commit/.action.merge)
					blockMerge $1 $2 $mergeAction 
					compare=$(diff -q .commit/$2/.$1.merging .commit/$2/$1)
					rm -f ./.commit/.action.merge
					rm -f ./.commit/.start.merge
					rm -f ./.commit/.finish.merge
					rm -f ./.commit/.add.merge
					rm -f ./.commit/.remove.merge
					rm -f ./.commit/.display.merge
				done
 				rm -f .commit/$2/.$1.merging
				mergeComplete=true
				echo "Merge complete"
				;;
			*)
				echo 'Wrong action entered'
				;;
		esac
	done
}


function blockMerge {
# Using the information created by the diff command and processed by the awk script
# run either add, change or delete and give the user the ability to accept or reject the block of changes
# Input: 
# 	1) fileName (string)
# 	2) commitName (string)
# 	3) mergeAction (string)

	case $3 in 
		"a")
			# Insert lines to existing files using .finish.merge locations from awkdiff script

			finishLocs=($(sed -n "1,2p" .commit/.finish.merge))

			printf "Do you want to add the following lines at line(s): ${finishLocs[0]}-${finishLocs[1]} (Y/n) ?\n "
			printf "\n"
			cat .commit/.display.merge 
		 	printf "\n"
			
			read -p "Enter (Y/n): " userAction
			case $userAction in
				[Yy])
					# We can not insert the lines using sed if the file is shorter than the insert location (finishLocs)
					# So we need to count lines and compare length with finishLocs, if short, simply append changes to file
		
					lines=($(wc -l .commit/$2/$1))
					if test ${lines[0]} -lt ${finishLocs[0]}; then
						# .add.merge contains the lines to add, generated by awkdiff script
						cat .commit/.add.merge >> .commit/$2/$1
					else			
						cat .commit/.add.merge | sed -i ${finishLocs[0]}'e cat /dev/stdin' .commit/$2/$1
					fi
					;;
				[Nn])
					# if the user rejects the additions to the existing file, we need to remove the changes 
					# from the new file so that the diff command can continue to the next proposed changes

					loc=${finishLocs[0]}","${finishLocs[1]}"d"
					sed -i $loc .commit/$2/.$1.merging
					;;
			esac

			;;
		"c")
			# Change lines in existing file using .start.merge and .finish.merge locations from awkdiff script

			startLocs=($(sed -n "1,2p" .commit/.start.merge))
			finishLocs=($(sed -n "1,2p" .commit/.finish.merge))	
		
			printf "Do you want to replace the following lines at line(s): ${startLocs[0]}-${startLocs[1]} (Y/n) ?\n "
			printf "\n"
			cat .commit/.display.merge
			printf "\n"
		
			read -p "Enter (Y/n): " userAction
			case $userAction in 
				[Yy])
					# Delete lines from existing file and then add new lines
					sed -i "${startLocs[0]},${startLocs[1]}d" .commit/$2/$1
					
					# We can not insert the lines using sed if the file is shorter than the insert location (finishLocs)
					# So we need to count lines and compare length with finishLocs, if short, simply append changes to file
					lines=($(wc -l .commit/$2/$1))
					if test ${lines[0]} -lt ${finishLocs[0]}; then
						# .add.merge contains the lines to add, generated by awkdiff script
						cat .commit/.add.merge >> .commit/$2/$1
					else			
						cat .commit/.add.merge | sed -i ${finishLocs[0]}'e cat /dev/stdin' .commit/$2/$1
					fi
					;;
				[Nn])
					# if user rejects the change, we need to do the reverse change so that the diff function in merge can find the next block
					sed -i "${finishLocs[0]},${finishLocs[1]}d" .commit/$2/.$1.merging
					
					# We can not insert the lines using sed if the file is shorter than the insert location (finishLocs)
					# So we need to count lines and compare length with finishLocs, if short, simply append changes to file
					lines=($(wc -l .commit/$2/.$1.merging))
					if test ${lines[0]} -lt ${startLocs[0]}; then
						# .remove.merge contains the lines to add, generated by awkdiff script
						cat .commit/.remove.merge >> .commit/$2/.$1.merging
					else			
						cat .commit/.remove.merge | sed -i ${startLocs[0]}'e cat /dev/stdin' .commit/$2/.$1.merging
					fi
					;;
			esac
			;;
		"d")
			# Delete line in existing file using .start.merge locations from awkdiff script

			startLocs=($(sed -n "1,2p" .commit/.start.merge))
			printf "Do you want to delete the following lines at line(s): ${startLocs[0]}-${startLocs[1]} (Y/n) ?\n "
			printf "\n"
			cat .commit/.display.merge
			printf "\n"
		
			read -p "Enter (Y/n): " userAction
			case $userAction in 
				[Yy])
					sed -i "${startLocs[0]},${startLocs[1]}d" .commit/$2/$1
					;;
				[Nn])
					# if user rejects the deletion, we need to add the lines to the temporary staging file
				       	# so that the diff function can find the next block
					
					# We can not insert the lines using sed if the file is shorter than the insert location (finishLocs)
					# So we need to count lines and compare length with finishLocs, if short, simply append changes to file
					lines=($(wc -l .commit/$2/.$1.merging))
					if test ${lines[0]} -lt ${startLocs[0]}; then
						# .remove.merge contains the lines to add, generated by awkdiff script
						cat .commit/.remove.merge >> .commit/$2/.$1.merging
					else			
						cat .commit/.remove.merge | sed -i ${startLocs[0]}'e cat /dev/stdin' .commit/$2/.$1.merging
					fi
					;;
			esac
			;;
			
			
	esac

}

function display {
# Based on the flag, provide a numbered list to the user and allow them to choose a file. The file will be displayed 30 lines per key press
# Input: argArray (array)


	if test ${#argArray[@]} -eq 1; then
		case ${!argArray[@]} in
			staging) listStaging ;;
			last) listLastCommit ;;
			commits) listCommits ;;
		esac
	
		# if global indexed array fileDir is empty, there are no files to view
		if [[ ${#fileDir[@]} -eq 0 ]]; then
			exit
		fi
	
		read -p "Please enter a file number to view file: " userAction
		length=($(wc -l ${fileDir[$userAction]}))
	
		if [[ ${length[0]} -lt 30 ]]; then
			increment=${length[0]}
		else
			increment=30
		fi
	
		printf "Printing file: ${fileDir[$userAction]}\n"
		printf "Press any key to cycle through pages\n"
		printf "Number of lines in file: ${length[0]}\n"
	
		for (( i=1 ; i <= ${length[0]};i=$(($i+$increment)) )); do
			end=$(($i+$increment))
			cat ${fileDir[$userAction]} | awk 'NR >='$i' && NR <'$end' {print NR":",$0}'
			read 	
		done

	else
		if test ${#argArray[@]} -eq 0; then
			printf "Please specify a flag for the display function:\n\t-s (staging folder)\n\t-l (last commit folder)\n\t-c (choose commit)\n"
		elif	test ${#argArray[@]} -gt 1; then
			printf "Please only specify one flag for this function\n"
		fi
	fi	
}

function help {
# Display a help message
# Input: none
	printf "vc help\n
Usage: vc [COMMAND] [OPTION]
	Description: Version control your files with vc

Command: vc add
	Description: Add files to staging area
	Usage:
		vc add -f FILE (add a specific file)
		vc add -a (add all files in directory)

Command: vc list
	Description: List all files in relevant folders
	Usage:
		vc list 	(user is given an interactive display)
		vc list -s 	(list all files in staging)
		vc list -l 	(list all files in the last commit)
		vc list -c 	(choose which commit to view)
	
Command: vc commit
	Description: Add all files in staging to a commit. If there are
		differences between files, a merge procedure will be initiated.
	Usage:
		vc commit -m MESSAGE (Commit all files with a commit message)

Command: vc display
	Description: Display paginated contents of staged and committed files 
		in the repository
	Usage:
		vc display -s 	(choose a file to view from staging)
		vc display -l 	(choose a file to view from the last commit)
		vc display -c 	(choose a file to view from any commit)


	"
}


############################################################################################
## Initialisation
############################################################################################

# If there are no parameters, display message and exit
if [[ $# -eq 0 ]];
then
	printf "vc\nNo parameters provided\n\n"
	printf "Please enter 'vc help' for more information\n"
	exit 0
fi

# If command not in list, display message and exit
case $1 in
	"add"|"list"|"commit"|"display"|"help")
		action=$1
		shift
		;;
	*)
		printf "vc\nIncorrect command provided\nPlease enter 'vc help' for more information\n"
		exit
		;;
esac

# fileDir used by list sub-functions and display function
declare -a fileDir
# argArray used for provided flags to functions
declare -A argArray

if [ $action == 'add' ]; then

	while getopts 'caf:' flag; do
		case $flag in
			a)
				# if the user specifies -a, it overrides the other flags
				argArray[all]=true 
				if [[ -v "argArray[file]" ]]; then
					unset $argArray[file]
				fi
				if [[ -v "argArray[clear]" ]]; then
					unset $argArray[clear]
				fi

				break
				;;
				
			f) 
				argArray[file]=${OPTARG} ;;
			c)
				argArray[clear]=true ;;
		esac
	done
	add 
	
elif [ $action == 'list' ]; then
	
	while getopts 'slc' flag; do
		case $flag in
			s) argArray[staging]=true ;;
			l) argArray[last]=true ;;
			c) argArray[commits]=true ;;
		esac
	done
	list

elif [ $action == 'commit' ]; then
	
	while getopts 'm:' flag; do
		case $flag in
			m) argArray[msg]=${OPTARG} ;;
		esac
	done
	commit 

elif [ $action == 'display' ]; then
	
	while getopts 'slc' flag; do
		case $flag in
			s) argArray[staging]=true ;;
			l) argArray[last]=true ;;
			c) argArray[commits]=true ;;
		esac
	done
	display

elif [ $action == 'help' ]; then
	help
fi


