#!/bin/bash

if [[ $# -eq 0 ]];
then
	echo "No parameters provided"
	exit 0
fi

function add {

	if [[ -z $1 ]]; then
		echo "Add: No file provided"
		exit 0
	fi

	if [[ ! -f $1 ]]; then
		echo "Add: File '$1' doesn't exist"
		exit 0
	fi

	if [[ ! -d '.staging' ]]; then
		mkdir './.staging'
	fi
	cp $1 ./.staging/

	printf "$1 added to staging"
}

function list {

	echo "---------- Files in staging ----------"	
	printf "\n"
	if [[ -d './.staging' ]]; then
		i=0
		files=($(ls ./.staging))
		for line in ${files[@]}; do
			printf "\t"$i": "$line"\n"
		      	(( i = i+1 ))
		done
	fi	
	printf "\n"
	echo "---------- Files in staging ----------"	
	printf "\n"
	
	echo "---------- Committed files -----------"	
	printf "\n"
	if [[ -d './.commit' ]]; then
		i=0
		files=($(ls ./.commit))
		for line in ${files[@]}; do
			printf "\t"$i": "$line"\n"
		      	(( i = i+1 ))
		done
	fi
	printf "\n"
	echo "---------- Committed files -----------"	
	
}

function commit {
#	echo 'commit function'

	if [[ -z $1 ]]; then
		echo "Commit: no message provided"
		exit 0
	fi
	
	commitName=$"c"$(date +"%s%3N")
	commitDate=$(date)
#	echo $commitName
#	echo $commitDate
	mkdir -p ./.commit
	# copy last committed files into new folder
	commitDirs=($(ls ./.commit))
		
	lastCommit=0
	for commit in ${commitDirs[@]}; do
		dir=${commit:1}
		if [[ $dir -gt $lastCommit ]]; then
			#echo "last commit $lastCommit dir $dir"
			lastCommit=$dir
		fi
	done

	mkdir -p ./.commit/$commitName
	if [[ $lastCommit -ne 0 ]]; then
#		echo "last commit found"
		cp -r .commit/c$lastCommit/. ./.commit/$commitName/
	fi
	

	# get list of files in staging
	# individually compare with those in .commit
	# if same filename, run merge function
	# otherwise copy file to .commit

	stagingfiles=($(ls .staging))
	commitfiles=($(ls .commit/$commitName))
	#echo ${stagingfiles[@]}
	#echo ${commitfiles[@]}
	
	printf "Creating new commit: $commitName \n"
# show list of staging files?
	printf "Staged files: \n"
	for file in ${stagingfiles[@]};
	do
		printf "\t$file\n"
	done
	printf "\n"
	for file in ${stagingfiles[@]}
	do
		if [[ -f .commit/$commitName/$file ]]; then
			merge $file $commitName
		else		
			cp .staging/$file .commit/$commitName/
		fi
	done
	#echo "Commit date: "$commitDate > ./.commit/.commitInfo
	#echo "Message: "$1 >> ./.commit/.commitInfo
	#chmod 444 ./.commit/*
	#rm -r ./.staging
}

function merge {
	printf "File '$1' exists in last commit "
	compare=$(diff -q .staging/$1 .commit/$2/$1)
	if [[ $compare == "" ]]; then
		echo "and the files are identical"
	else
		echo "but the files are not identical"
	fi
	mergeComplete="false"
	while [[ $mergeComplete != true ]]; do
		printf "Do you want to overwrite (1) or merge (2) '$1' ? "
		read userAction

		case $userAction in
			"1")
				cp .staging/$1 .commit/$2/$1
				mergeComplete=true
				echo "File $1 overwritten"
				;;
			"2")
				# create a copy of the staging file
				# process will iteratively align the commit file and the staging file until there
				# are no differences left between the two
				cp .staging/$1 .commit/$2/.$1.merging
				compare=$(diff -q .commit/$2/.$1.merging .commit/$2/$1)
				while [[ $compare != ""  ]]; do
					diff ".commit/$2/$1" ".commit/$2/.$1.merging" | awk -f awkdiff
					mergeAction=$(sed "1q;d" .commit/.action.merge)
					blockMerge $1 $2 $mergeAction 
					compare=$(diff -q .commit/$2/.$1.merging .commit/$2/$1)
				done	
				$mergeComplete=true
				echo "Merge complete"
				;;
			*)
				echo 'Wrong action entered'
				;;
		esac
	done
}


function blockMerge {
	case $3 in 
		"a")
#			startLocs=($(sed -n "1,2p" .commit/.start.merge))
			finishLocs=($(sed -n "1,2p" .commit/.finish.merge))
#			if [[ ${finishLocs[0]} -le 1 ]]; then
#				startView=1
#			else
#				startView=$(( ${finishLocs[0]}-1 ))
#			fi
#			endView=$(( ${finishLocs[1]}+1 )) 
#			sed -n "$startView,$endView p" <.commit/.$1.merging >.commit/.display.merge
#			sed -i "${finishLocs[0]},${finishLocs[1]} s/.*/>>>> &/" .commit/.display.merge
#			cat .commit/.display.merge | awk -v N=$startView -f awklinenumber



			printf "Do you want to add the following lines at line(s): ${finishLocs[0]}-${finishLocs[1]} (Y/n) ?\n "
			printf "\n"
			cat .commit/.display.merge 
		 	printf "\n"
			
			read -p "Enter (Y/n): " userAction
			case $userAction in
				[Yy])
			
					lines=($(wc -l .commit/$2/$1))
					if test ${lines[0]} -lt ${finishLocs[0]}; then
						cat .commit/.add.merge >> .commit/$2/$1
					else			
						cat .commit/.add.merge | sed -i ${finishLocs[0]}'e cat /dev/stdin' .commit/$2/$1
					fi
					;;
				[Nn])
					loc=${finishLocs[0]}","${finishLocs[1]}"d"
					sed -i $loc .commit/$2/.$1.merging
					;;
			esac

			;;
		"c")
			echo "replacing"

			startLocs=($(sed -n "1,2p" .commit/.start.merge))
			finishLocs=($(sed -n "1,2p" .commit/.finish.merge))	
		
			printf "Do you want to replace the following lines at line(s): ${startLocs[0]}-${startLocs[1]} (Y/n) ?\n "
			printf "\n"
			cat .commit/.display.merge
			printf "\n"
		
			read -p "Enter (Y/n): " userAction
			case $userAction in 
				[Yy])
					#echo "del"
					
					sed -i "${startLocs[0]},${startLocs[1]}d" .commit/$2/$1
					#echo "add ${finishLocs[0]}"
					#sed -i "${finishLocs[0]}i\\$(cat .commit/.add.merge)" .commit/$1
					lines=($(wc -l .commit/$2/$1))
					if test ${lines[0]} -lt ${finishLocs[0]}; then
						cat .commit/.add.merge >> .commit/$2/$1
					else			
						cat .commit/.add.merge | sed -i ${finishLocs[0]}'e cat /dev/stdin' .commit/$2/$1
					fi
					#echo "done"
					;;
				[Nn])
					echo "not replacing" ${startLocs[0]},${startLocs[1]},${finishLocs[0]},${finishLocs[1]}
					sed -i "${finishLocs[0]},${finishLocs[1]}d" .commit/$2/.$1.merging
					lines=($(wc -l .commit/$2/.$1.merging))
					if test ${lines[0]} -lt ${startLocs[0]}; then
						cat .commit/.remove.merge >> .commit/$2/.$1.merging
					else			
						cat .commit/.remove.merge | sed -i ${startLocs[0]}'e cat /dev/stdin' .commit/$2/.$1.merging
					fi
					;;
			esac
			;;
		"d")
			echo "deleting"
			startLocs=($(sed -n "1,2p" .commit/.start.merge))
			finishLocs=($(sed -n "1,2p" .commit/.finish.merge))	
			printf "Do you want to delete the following lines at line(s): ${startLocs[0]}-${startLocs[1]} (Y/n) ?\n "
			printf "\n"
			cat .commit/.display.merge
			printf "\n"
		
			read -p "Enter (Y/n): " userAction
			case $userAction in 
				[Yy])
					echo "del yes"	${startLocs[0]},${startLocs[1]}d
					sed -i "${startLocs[0]},${startLocs[1]}d" .commit/$2/$1
					;;
				[Nn])
					echo "del no"
					lines=($(wc -l .commit/$2/.$1.merging))
					if test ${lines[0]} -lt ${startLocs[0]}; then
						cat .commit/.remove.merge >> .commit/$2/.$1.merging
					else			
						cat .commit/.remove.merge | sed -i ${startLocs[0]}'e cat /dev/stdin' .commit/$2/.$1.merging
					fi
					;;
			esac
			;;
			
			
	esac

}

if [ $1 == 'add' -o $1 == '-a' ]; then
	add $2
elif [ $1 == 'list' -o $1 == '-l' ]; then
	list
elif [ $1 == 'commit' -o $1 == '-c' ]; then
	commit $2
fi


