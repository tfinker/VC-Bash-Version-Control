#!/bin/awk

# Isolate the first block of a diff command and create output files  

BEGIN {
	block=0
	system("rm -f .commit/.action.merge")
	system("rm -f .commit/.start.merge")
	system("rm -f .commit/.finish.merge")
	system("rm -f .commit/.remove.merge")
	system("rm -f .commit/.add.merge")
	system("rm -f .commit/.display.merge")
}
	{
		if ($0 ~ /[0-9]{1}(,[0-9])?[acd]{1}[0-9]{1}(,[0-9])?/ && block == 1){
			# block complete
			exit
		}
		if($0 ~ /[0-9]{1}(,[0-9])?[acd]{1}[0-9]{1}(,[0-9])?/ && block == 0){
			# first block matched
			block=1
			match($0, /[acd]/, action) # pull out action
			split($0, lines, /[acd]/) # pull out line numbers
		}
	}
	# Remove diff formatting for actual merging
	{if($1 ~ /</){	print substr($0,3) >> ".commit/.remove.merge"	}}
	{if($1 ~ />/){ 	print substr($0,3) >> ".commit/.add.merge"	}}

	# Keep diff formatting to display to user
NR>1 	{print "\t"$0 >> ".commit/.display.merge"}

END {
	print action[0] >> ".commit/.action.merge"
	
	# create a uniform line format ("start,end")
	if ( lines[1] ~ /[,]/ ) {
		split (lines[1], rlines, /[,]/)
		print rlines[1] >> ".commit/.start.merge"
		print rlines[2] >> ".commit/.start.merge"
	}
	else { 
		print lines[1] >> ".commit/.start.merge"
		print lines[1] >> ".commit/.start.merge"
	}
	if ( lines[2] ~ /[,]/ ) {
		split (lines[2], alines, /[,]/)
		print alines[1] >> ".commit/.finish.merge"
		print alines[2] >> ".commit/.finish.merge"
	}
	else {  
		print lines[2] >> ".commit/.finish.merge"
		print lines[2] >> ".commit/.finish.merge"
	}
}


